// Mocks generated by Mockito 5.4.2 from annotations
// in phase_one_flutter/test/providers/note_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:phase_one_flutter/models/note_model.dart' as _i2;
import 'package:phase_one_flutter/providers/note_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoteModel_0 extends _i1.SmartFake implements _i2.NoteModel {
  _FakeNoteModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteProvider extends _i1.Mock implements _i3.NoteProvider {
  MockNoteProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.NoteModel> get notes => (super.noSuchMethod(
        Invocation.getter(#notes),
        returnValue: <_i2.NoteModel>[],
      ) as List<_i2.NoteModel>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i2.NoteModel getNoteById({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [],
          {#id: id},
        ),
        returnValue: _FakeNoteModel_0(
          this,
          Invocation.method(
            #getNoteById,
            [],
            {#id: id},
          ),
        ),
      ) as _i2.NoteModel);

  @override
  void addNote(_i2.NoteModel? note) => super.noSuchMethod(
        Invocation.method(
          #addNote,
          [note],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateNote(_i2.NoteModel? note) => super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [note],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteNote(_i2.NoteModel? note) => super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [note],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
